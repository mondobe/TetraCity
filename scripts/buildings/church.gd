class_name Church
extends Node

## The weights used for weighting building spawn numbers
var building_weight_factors : Dictionary = {
	"city_hall": 1,
	"apartment": 1.8,
	"bank": 2.0,
	"cafe": 1.6,
	"church": 4.0,
	"park": 1.6,
	"school": 1.6,
	"solar_farm": 3.0,
	"nuclear_reactor": 1
	}

func get_bonus() -> BuildingBonus:
	return BuildingBonus.new().with_buildings_reweighting(update_building_weights())

## Loops through all adjacent buildings and boosts any which haven't been boosted
func update_building_weights() -> Dictionary:
	var adjacent_buildings: Array = get_parent().get_adjacent_buildings()
	var new_weights: Dictionary = Dictionary()
	for building: Building in adjacent_buildings:
		var b_name: String = building.blueprint.name
		new_weights[b_name] = new_weights.get(b_name, 1) * building_weight_factors[b_name]
	return new_weights

## Produces a new set of Spawn Weights
static func produce_spawn_weights(church_count: int) -> WeightedRandom:
	var lambda = .1

	for i in range(church_count):
		lambda += (1 - lambda) / 3

	var new_spawns: WeightedRandom = WeightedRandom.new()

	for i in range(0,5):
		var x = (i - 1.237) / 1.3
		var xfact = factorial(x)
		var weight = exp(-lambda) * lambda ** x / xfact
		new_spawns.choices[i] = weight

	return new_spawns

func get_info_text() -> String:
	return "Balloons are more likely to appear, especially those holding
adjacent buildings."

## A Factorial Function Implementation for complex numbers
## Produces factorial-like numbers (actual implementation is a gamma)
static func factorial(x: float):
	var gamma_coefficients = [
	1,
	0.57721566490153286060651209008240243104215933593992359880576723488486772677766467,
	-0.65587807152025388107701951514539048127976638047858434729236244568387083835372210,
	-0.04200263503409523552900393487542981871139450040110609352206581297618009687597599,
	0.16653861138229148950170079510210523571778150224717434057046890317899386605647425,
	-0.04219773455554433674820830128918739130165268418982248637691887327545901118558900,
	-0.00962197152787697356211492167234819897536294225211300210513886262731167351446074,
	0.00721894324666309954239501034044657270990480088023831800109478117362259497415854,
	-0.00116516759185906511211397108401838866680933379538405744340750527562002584816653,
	-0.00021524167411495097281572996305364780647824192337833875035026748908563946371678,
	0.00012805028238811618615319862632816432339489209969367721490054583804120355204347,
	-0.00002013485478078823865568939142102181838229483329797911526116267090822918618897,
	-0.00000125049348214267065734535947383309224232265562115395981534992315749121245561,
	0.00000113302723198169588237412962033074494332400483862107565429550539546040842730,
	-0.00000020563384169776071034501541300205728365125790262933794534683172533245680371,
	0.00000000611609510448141581786249868285534286727586571971232086732402927723507435,
	0.00000000500200764446922293005566504805999130304461274249448171895337887737472132,
	-0.00000000118127457048702014458812656543650557773875950493258759096189263169643391,
	0.00000000010434267116911005104915403323122501914007098231258121210871073927347588,
	0.00000000000778226343990507125404993731136077722606808618139293881943550732692987,
	-0.00000000000369680561864220570818781587808576623657096345136099513648454655443000,
	0.00000000000051003702874544759790154813228632318027268860697076321173501048565735,
	-0.00000000000002058326053566506783222429544855237419746091080810147188058196444349,
	-0.00000000000000534812253942301798237001731872793994898971547812068211168095493211,
	]

	var result = gamma_coefficients[-1]
	for i in range(len(gamma_coefficients) - 2, -1, -1):
		result = result * x + gamma_coefficients[i]
	return 1.0 / result
